/current 'gets all the  current weather data - done
/current/:state 'gets a specific states current weather - done

/history/:date 'gets all the data for s specific date - done 
/history/:state/:date ' gets all the data for a specific state -done

/trends/:date 'gets all the current weather data with historical data for a given date
/trends/:state/:date 'gets the current weather data with historical data for the given date and state

**
     * 
     * @param {*} state Specifies the state to get the weather for.
     * @returns Returns a new instance of the WeatherInfo class
     * @description This function returns the weather data from the NWS API, needs to be awaited
     */
    static async nwsAPI(state) { // This class is the child class for the NWS API
        const datetime = new Date()
        const dateStamp = `${datetime.getFullYear()}-${datetime.getMonth()}-${datetime.getDate()}`
        const period = datetime.getHours()
        const data = await cacheValidate(`current/state=${state.name}&date=${dateStamp}&period=${period}&type=CURRENT`, async () => {
        const data = await getNWSData(state)
        if (data.periods[0].temperature === undefined) {
            const backup = await getOpenWeatherData(state, dateStamp)
        return backup
        } else {
            return data
        }
    })


        console.log(data)


        const { updateTime, periods } = data
        const date = new Date(`${updateTime}`)

        const weather =
        {
            date: date,
            temperature: periods[0].temperature,
            requestState: state,
            requestType: 'NWSApi',
            fullApiResponse: data
        }

        

        
        return new WeatherInfo(weather)
    }

    /**
     *  
     * @param {*} state Specifies the state to get the weather for.
     * @returns Returns a new instance of the WeatherInfo class
     * @description This function returns the weather data from the OpenWeather API, needs to be awaited
     */


    static async openWeatherAPI(state, date) { // This class is the child class for the OpenWeather API   
        
        const data = await getOpenWeatherData(state, date)
        const { days } = data
        const weather =
        {
            date: new Date(days[0].datetime),
            temperature: days[0].temp,
            requestState: state,
            requestType: 'OpenWeatherApi',
            fullApiResponse: data
        }
        return new WeatherInfo(weather)
    }



/**
 * 
 * @param {*} date 
 * @returns {Date}
 * @description This function converts the date from the weathers-watch API to a date object
 */

function convertOrdinalDate(date) {
    const dateString = date;
    const cleanedDateString = dateString.replace(/(\d)(?:st|nd|rd|th)/, '$1');
    const dateObject = new Date(cleanedDateString);
    return dateObject; // Output: 2023-04-01T00:00:00.000Z (the exact output format may vary depending on the environment)
}












return (
    <Box>



        <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', flexDirection: 'column', padding: 2, backgroundColor: '#0a0a0a' }}>
            <Typography variant="h2" sx={{ marginBottom: 1, fontFamily: 'monospace', color: '#c6d300' }}>U.S. State Temperature Map</Typography>
            <Typography variant="h6" sx={{ marginBottom: 1, fontFamily: 'monospace', color: '#ffffff' }}>Discover the temperature patterns across the United States</Typography>
            <Typography variant="body1" sx={{ maxWidth: '80%', marginBottom: 2, fontFamily: 'monospace', color: '#cccccc' }}>This map shows the temperature of each state in the United States. The colors represent the temperature of each state. The darker the color, the colder the temperature. The lighter the color, the warmer the temperature. The temperature is measured in degrees Fahrenheit.</Typography>
        </Box>

        <Stack direction="column" alignItems="center" spacing={2}>


            <Box sx={{ position: 'relative', width: 'min(80vw, 80vh)', display: 'flex', alignItems: 'center', margin: '0 auto' }}>
                <div style={{ position: 'relative', width: '100%', paddingBottom: '100%' }}>
                    <Box sx={{ backgroundColor: 'darkgrey', position: 'absolute', top: 0, left: 0, width: '100%', height: '100%', display: 'flex', justifyContent: 'center', alignItems: 'center', borderColor: '#c6d300', borderRadius: 4, borderWidth: 3, borderStyle: 'solid' }}>
                        {isLoading ? (
                            <Box
                                sx={{
                                    position: 'absolute',
                                    display: 'flex',
                                    justifyContent: 'center',
                                    alignItems: 'center',
                                    top: 0,
                                    left: 0,
                                    width: '100%',
                                    height: '100%',
                                    borderRadius: 3,
                                    backgroundColor: 'rgba(50, 50, 50, 0.7)',
                                    zIndex: 1,
                                }}
                            >
                                <CircularProgress />
                            </Box>
                        ) : null}

                        <Box
                            sx={{
                                position: 'absolute',
                                display: 'flex',
                                justifyContent: 'center',
                                alignItems: 'center',
                                top: 0,
                                left: 0,
                                width: '100%',
                                height: '100%',
                            }}
                        >





                            <ComposableMap projection="geoAlbersUsa">
                                <Geographies geography={geoUrl}>
                                    {({ geographies }) =>
                                        geographies.map((geo) => (
                                            <Tooltip title={geo.properties.name} key={geo.rsmKey}>
                                                <Geography
                                                    key={geo.rsmKey}
                                                    geography={geo}
                                                    fill={mapData[geo.properties.name] || '#EEE'}
                                                    stroke="#000000"
                                                    strokeWidth={0.8}
                                                    onClick={() => {
                                                        console.log("Clicked: ", geo.properties.name);
                                                    }}
                                                    style={{
                                                        default: {
                                                            outline: "none"
                                                        },
                                                        hover: {
                                                            outline: "none"
                                                        },
                                                        pressed: {
                                                            outline: "none"
                                                        }
                                                    }}
                                                />
                                            </Tooltip>
                                        ))
                                    }
                                </Geographies>
                            </ComposableMap>

                        </Box>
                    </Box>
                </div>
            </Box>






            {/*Button Area */}
            <Box sx={{ display: 'flex', justifyContent: 'center', flexDirection: 'column', alignItems: 'center', padding: 2, backgroundColor: '#f5f5f5', borderRadius: 4 }}>
                <Grid container spacing={2} sx={{ justifyContent: 'center' }}>


                    <Grid item>

                        <Button variant="contained" onClick={currentInfo}>
                            Current
                        </Button>

                    </Grid>



                    <Grid item>

                        <Button variant="contained" onClick={compareInfo} disabled>
                            Compare
                        </Button>

                    </Grid>



                    <Grid item>

                        <Stack direction="column" spacing={2}>
                            <Button variant="contained" onClick={pastInfo}>
                                Past
                            </Button>

                            <LocalizationProvider dateAdapter={AdapterDayjs}>
                                <DatePicker
                                    label="Controlled picker"
                                    value={value}
                                    onChange={(newValue) => setValue(newValue)}
                                />
                            </LocalizationProvider>
                        </Stack>

                    </Grid>


                </Grid>
            </Box>

        </Stack>

    </Box>

);

}
